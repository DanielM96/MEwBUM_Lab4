function [hammer, raw1, raw2, raw3 ] = importRawData(filename, startRow, endRow)
%IMPORTRAWDATA Import numeric data from a text file as column vectors.
%   [HAMMER,RAW1,RAW2,RAW3] = IMPORTRAWDATA(FILENAME) Reads data from
%   text file FILENAME for the default selection.
%
%   [HAMMER,RAW1,RAW2,RAW3] = IMPORTRAWDATA(FILENAME, STARTROW,
%   ENDROW) Reads data from rows STARTROW through ENDROW of text file
%   FILENAME.
%
% Example:
%   [hammer,raw1,raw2,raw3] = importRawData('s123.unv',[30,1751,3472,5193], [1736,3457,5178,6899]);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/11/03 17:09:14

%% Initialize variables.
delimiter = ' ';
if nargin<=2
    startRow = [30,1751,3472,5193];
    endRow = [1736,3457,5178,6899];
end

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
a1 = dataArray{:, 1};
a2 = dataArray{:, 2};
a3 = dataArray{:, 3};
a4 = dataArray{:, 4};
a5 = dataArray{:, 5};
a6 = dataArray{:, 6};

wym = zeros(1,1707);
res1 = zeros(1,1707);
res2 = zeros(1,1707);
res3 = zeros(1,1707);

% wielokrotnoœci
mx1 = 1707;
mx2 = 2*1707;
mx3 = 3*1707;
mx4 = 4*1707;

% wymuszenie
for i = 1:mx1
    wym(6*(i-1)+1) = a1(i);
    wym(6*(i-1)+2) = a2(i);
    wym(6*(i-1)+3) = a3(i);
    wym(6*(i-1)+4) = a4(i);
    wym(6*(i-1)+5) = a5(i);
    wym(6*(i-1)+6) = a6(i);
end

% P1
for i = (mx1+1):mx2
    res1(6*(i-(mx1+1))+1) = a1(i);
    res1(6*(i-(mx1+1))+2) = a2(i);
    res1(6*(i-(mx1+1))+3) = a3(i);
    res1(6*(i-(mx1+1))+4) = a4(i);
    res1(6*(i-(mx1+1))+5) = a5(i);
    res1(6*(i-(mx1+1))+6) = a6(i);
end

% P2
for i = (mx2+1):mx3
    res2(6*(i-(mx2+1))+1) = a1(i);
    res2(6*(i-(mx2+1))+2) = a2(i);
    res2(6*(i-(mx2+1))+3) = a3(i);
    res2(6*(i-(mx2+1))+4) = a4(i);
    res2(6*(i-(mx2+1))+5) = a5(i);
    res2(6*(i-(mx2+1))+6) = a6(i);
end

% P3
for i = (mx3+1):mx4
    res3(6*(i-(mx3+1))+1) = a1(i);
    res3(6*(i-(mx3+1))+2) = a2(i);
    res3(6*(i-(mx3+1))+3) = a3(i);
    res3(6*(i-(mx3+1))+4) = a4(i);
    res3(6*(i-(mx3+1))+5) = a5(i);
    res3(6*(i-(mx3+1))+6) = a6(i);
end
%% Allocate processed data to column variable names
hammer = wym;
raw1 = res1;
raw2 = res2;
raw3 = res3;